package JUnit;

import cz.Stasak.desktop.Classes.Admin;
import cz.Stasak.desktop.Classes.User;
import cz.Stasak.desktop.Classes.UserManager;
import cz.Stasak.desktop.GUI.GUIController;
import cz.Stasak.desktop.GUI.JavaFXInitializer;
import javafx.application.Platform;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class    GUIControllerTest {

    private UserManager userManager; // Skuteƒçn√° instance
    private Admin admin; // Skuteƒçn√Ω admin
    private GUIController controller; // Testovan√° t≈ô√≠da
    private String testUsername;

    @BeforeAll
    public static void setupFX() {
        JavaFXInitializer.init();
    }


    @BeforeEach
    public void setUp() {
        try {
            // Inicializace skuteƒçn√Ωch instanc√≠
            userManager = new UserManager();
            userManager.clearUsers();

            admin = new Admin("admin", "admin123");
            controller = new GUIController(userManager, admin);
            testUsername = "testUser_" + UUID.randomUUID();
        } catch (Exception e) {
            fail("Initialization of test failed: " + e.getMessage());
        }
    }

    @Test
    public void testRegisterUser_Success() {
        Label errorLabel = new Label();

        System.out.println("üë§ Testovac√≠ u≈æivatel: " + testUsername);

        System.out.println("Starting testRegisterUser_Success");
        boolean result = controller.registerUser(testUsername, "testPass123", errorLabel);

        // V√Ωstupy pro ladƒõn√≠
        System.out.println("Result: " + result);
        System.out.println("Error label visible: " + errorLabel.isVisible());
        System.out.println("Error label text: " + errorLabel.getText());
        System.out.println("User exists in UserManager: " + (userManager.getUser(testUsername) != null));

        assertTrue(result, "‚ö†Ô∏è Registrace selhala!");
        assertFalse(errorLabel.isVisible(), "‚ùå Error label se nemƒõl zobrazit po √∫spƒõ≈°n√© registraci!");
        assertNotNull(userManager.getUser(testUsername), "‚ö†Ô∏è U≈æivatel nebyl nalezen po registraci!");
    }


    @Test
    public void testRegisterUser_Failure() {
        Label errorLabel = new Label();

        // Registrace u≈æivatele poprv√©
        controller.registerUser(testUsername, "testPass", errorLabel);

        // Druh√° registrace stejn√©ho u≈æivatele (mus√≠ selhat)
        boolean result = controller.registerUser(testUsername, "anotherPass", errorLabel);

        assertFalse(result);
        assertTrue(errorLabel.isVisible());
        assertEquals("Username already exists. Please choose another one.", errorLabel.getText());
    }

    @Test
    public void testLoginUser_Admin() {
        // Ovƒõ≈ôen√≠ p≈ôihl√°≈°en√≠ admina
        assertTrue(controller.loginUser("admin", "admin123"));
    }

    @Test
    public void testLoginUser_ValidUser() {
        Label errorLabel = new Label();
        System.out.println("üî• Kontroluji existenci testUser p≈ôed p≈ôihl√°≈°en√≠m...");

        // ‚ùó Registrujeme testUser **jen pokud neexistuje**
        if (userManager.getUser(testUsername) == null) {
            System.out.println("‚ùå testUser neexistuje! Registruji...");
            boolean registrationSuccess = controller.registerUser(testUsername, "testPass123", errorLabel);
            assertTrue(registrationSuccess, "‚ö†Ô∏è Registrace testUser selhala!");
        }

        // ‚úÖ Ujist√≠me se, ≈æe je testUser spr√°vnƒõ registrov√°n
        User registeredUser = userManager.getUser(testUsername);
        assertNotNull(registeredUser, "‚ö†Ô∏è testUser nebyl nalezen po registraci!");
        System.out.println("üîë Heslo ulo≈æen√© v UserManager: " + registeredUser.getPassword());

        // üìù Pokus√≠me se p≈ôihl√°sit
        boolean result = controller.loginUser(testUsername, "testPass123");
        System.out.println("‚úÖ P≈ôihl√°≈°en√≠ v√Ωsledek: " + result);

        assertTrue(result, "‚ö†Ô∏è P≈ôihl√°≈°en√≠ testUser selhalo!");
    }




    @Test
    public void testLoginUser_InvalidUser() {
        // P≈ôihl√°≈°en√≠ s neplatn√Ωmi √∫daji
        boolean result = controller.loginUser("invalidUser", "wrongPass");

        assertFalse(result);
    }

    @Test
    public void testRefreshUserList() {
        ListView<String> userListView = new ListView<>();

        // Registrace u≈æivatel≈Ø
        userManager.registerUser("user1", "pass1");
        userManager.registerUser("user2", "pass2");

        // Obnoven√≠ seznamu u≈æivatel≈Ø
        controller.refreshUserList(userListView);

        assertEquals(2, userListView.getItems().size());
        assertTrue(userListView.getItems().contains("user1"));
        assertTrue(userListView.getItems().contains("user2"));
    }

    @Test
    public void testDeleteUser_Success() {
        ListView<String> userListView = new ListView<>();

        // Debug v√Ωpisy ‚Äì kontrola instance userManager
        System.out.println("üîç userManager (test): " + userManager);
        System.out.println("üîç userManager (controller): " + controller.getUserManager());

        // Registrace u≈æivatele a p≈ôid√°n√≠ do seznamu
        userManager.registerUser("user1", "pass1");
        userListView.getItems().add("user1");

        // Smaz√°n√≠ u≈æivatele
        boolean result = controller.deleteUser("user1", userListView);
        System.out.println("üóëÔ∏è V√Ωsledek smaz√°n√≠: " + result);

        assertTrue(result, "U≈æivatel nebyl smaz√°n!");
        assertEquals(0, userListView.getItems().size());
        assertNull(userManager.getUser("user1"));
    }


    @Test
    public void testDeleteUser_Failure() {
        ListView<String> userListView = new ListView<>();

        // P≈ôid√°n√≠ u≈æivatele do seznamu
        userListView.getItems().add("user1");

        // Smaz√°n√≠ u≈æivatele, kter√Ω neexistuje v UserManager
        controller.deleteUser("user1", userListView);

        assertEquals(1, userListView.getItems().size());
        assertEquals("user1", userListView.getItems().get(0));
    }

    @Test
    public void testUpdateUserProfile_Success() {
        // Registrace u≈æivatele
        userManager.registerUser("oldUser", "oldPass");

        // Aktualizace u≈æivatelsk√©ho profilu
        boolean result = controller.updateUserProfile("oldUser", "newUser", "newPass");

        assertTrue(result);
        assertNull(userManager.getUser("oldUser"));
        assertNotNull(userManager.getUser("newUser"));
        assertEquals("newPass", userManager.getUser("newUser").getPassword());
    }

    @Test
    public void testUpdateUserProfile_Failure() {
        // Pokus o aktualizaci neexistuj√≠c√≠ho u≈æivatele
        boolean result = controller.updateUserProfile("nonExistentUser", "newUser", "newPass");

        assertFalse(result);
    }

    @Test
    public void testValidatePassword_Valid() {
        Label errorLabel = new Label();
        boolean result = controller.validatePassword("strongPass", errorLabel);

        assertTrue(result); // Heslo je validn√≠
        assertFalse(errorLabel.isVisible());
    }

    @Test
    public void testValidatePassword_TooShort() {
        Label errorLabel = new Label();
        boolean result = controller.validatePassword("weak", errorLabel);

        assertFalse(result);
        assertTrue(errorLabel.isVisible());
        assertEquals("Password must be at least 8 characters long.", errorLabel.getText());
    }

    @Test
    public void testValidatePassword_Null() {
        Label errorLabel = new Label();
        boolean result = controller.validatePassword(null, errorLabel);

        assertFalse(result);
        assertTrue(errorLabel.isVisible());
        assertEquals("Password cannot be empty.", errorLabel.getText());
    }

    @Test
    public void testValidatePassword_OnlySpaces() {
        Label errorLabel = new Label();
        boolean result = controller.validatePassword("   ", errorLabel);

        assertFalse(result);
        assertTrue(errorLabel.isVisible());
        assertEquals("Password cannot be empty.", errorLabel.getText());
    }

    @Test
    public void testValidatePassword_LeadingSpace() {
        Label errorLabel = new Label();
        boolean result = controller.validatePassword(" pass1234", errorLabel);

        assertFalse(result);
        assertTrue(errorLabel.isVisible());
        assertEquals("Password cannot start or end with spaces.", errorLabel.getText());
    }

    @Test
    public void testValidatePassword_TrailingSpace() {
        Label errorLabel = new Label();
        boolean result = controller.validatePassword("pass1234 ", errorLabel);

        assertFalse(result);
        assertTrue(errorLabel.isVisible());
        assertEquals("Password cannot start or end with spaces.", errorLabel.getText());
    }

}
